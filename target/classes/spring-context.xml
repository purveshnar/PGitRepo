<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:file="http://www.springframework.org/schema/integration/file"
	xsi:schemaLocation="  
             http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
             http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
             http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.2.xsd  
             http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd  
             http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
             http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file.xsd">
		
	<context:annotation-config />
	<context:component-scan base-package="com.kapx.spring.batch" />
	<!-- <import resource="spring-context-batch.xml" /> -->

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="persistenceAnnotation"
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
	<tx:annotation-driven transaction-manager="transactionManager" />
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="isolationLevelForCreate" value="ISOLATION_DEFAULT" />
	</bean>
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
	<batch:job id="fileUploadJob">
		<!-- <batch:listeners> <batch:listener ref="jobExecutionListener" /> </batch:listeners> -->
		<batch:step id="step1">
			<batch:tasklet>
				<!-- <batch:listeners> <batch:listener ref="failureLoggerListener" /> 
					</batch:listeners> -->
				<batch:chunk reader="itemReader" writer="contactWriter"
					commit-interval="1000" />
			</batch:tasklet>
		</batch:step>
	</batch:job>
	<bean id="itemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="firstName,lastName,email" />
						<property name="delimiter" value="," />
					</bean>
				</property>
				<property name="fieldSetMapper" ref="contactFieldSetMapper" />
			</bean>
		</property>
		<property name="resource" value="Contacts.txt" />
	</bean>
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- Connection Pool -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClass}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="default" />
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="true" />
				<property name="generateDdl" value="true" />
				<property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" />
			</bean>
		</property>
	</bean>

	<!-- Spring Integration Configuration -->
	<!-- <batch:job-repository id="jobRepository" /> -->

	<!-- Polling a directory for txt files-->
	<file:inbound-channel-adapter id="filesIn"
		directory="file:${java.io.tmpdir}/spring-integration-samples/input"
		filename-pattern="*.txt">
		<int:poller id="poller" fixed-delay="5000" />
	</file:inbound-channel-adapter>


	<!-- Transform the file into JobLaunchRequest as this is needed 
			to launch the job used by bean JobLaunchingMessageHandler-->
	<int:transformer input-channel="filesIn" output-channel="requests">
		<bean class="com.kapx.spring.integration.FileMessageToJobRequest">
			<property name="job" ref="fileUploadJob" />
			<property name="fileParameterName" value="input.file.name" />
		</bean>
	</int:transformer>


	<!-- Launches the Spring Batch job -->
	<int:service-activator input-channel="requests"
		output-channel="filesOut" method="launch">
		<bean
			class="org.springframework.batch.integration.launch.JobLaunchingMessageHandler">
			<constructor-arg ref="jobLauncher" />
		</bean>
	</int:service-activator>
	
	<!-- To Copy files to destination folder -->
	<int:service-activator input-channel="filesIn" output-channel="filesOut" ref="handler" />

	<file:outbound-channel-adapter id="filesOut"
		directory="file:${java.io.tmpdir}/spring-integration-samples/output" />

	<bean id="handler" class="com.kapx.spring.integration.Handler" />

</beans>